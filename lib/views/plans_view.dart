import 'package:flutter/material.dart';

import '../data/plan_repository.dart';
import 'plan_view.dart';

class PlansView extends StatelessWidget {
  PlansView({super.key}) {
    // TODO: remove
    if (PlanRepository.instance.plans.isEmpty) {
      PlanRepository.instance.addPlan(
        Plan(
          title: 'Superhero Kids Room',
          items: [
            PlanItem(title: 'Clear the clutter'),
            PlanItem(title: 'Organize books and toys'),
            PlanItem(title: 'Superhero theme decorations'),
            PlanItem(title: 'Install superhero bedding'),
            PlanItem(title: 'Set up play area'),
            PlanItem(title: 'Add storage solutions'),
          ],
        ),
      );
    }
  }

  final PlanRepository _repo = PlanRepository.instance;

  @override
  Widget build(BuildContext context) => Padding(
        padding: const EdgeInsets.all(24),
        child: ClipRRect(
          borderRadius: BorderRadius.circular(16),
          child: ColoredBox(
            color: Colors.white,
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                children: [
                  Expanded(
                    child: ListenableBuilder(
                      listenable: _repo,
                      builder: (context, child) => ListView(
                        scrollDirection: Axis.horizontal,
                        children: [
                          for (var planIndex = 0;
                              planIndex < PlanRepository.instance.plans.length;
                              planIndex++)
                            SizedBox(
                              width: 300,
                              child: Padding(
                                padding: const EdgeInsets.only(right: 16),
                                child: PlanView(
                                  plan: _repo.plans[planIndex],
                                  onItemStatusChanged: (itemIndex, isDone) =>
                                      _onItemStatusChanged(
                                    planIndex,
                                    itemIndex,
                                    isDone,
                                  ),
                                  onRemovePlan: () => _onRemovePlan(planIndex),
                                ),
                              ),
                            ),
                        ],
                      ),
                    ),
                  ),
                  const Padding(
                    padding: EdgeInsets.only(top: 16),
                    child: Align(
                      alignment: Alignment.bottomRight,
                      child: Text(
                        'Generated by the Gemini API',
                        style: TextStyle(
                          color: Colors.blue,
                          fontSize: 12,
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),
      );

  void _onItemStatusChanged(int planIndex, int itemIndex, bool isDone) =>
      _repo.setPlanItemStatus(
        planIndex: planIndex,
        itemIndex: itemIndex,
        isDone: isDone,
      );

  void _onRemovePlan(int planIndex) => _repo.removePlan(planIndex);
}
